{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lockbox for desktop Welcome to the Lockbox desktop addon documentation!","title":"Introduction"},{"location":"#lockbox-for-desktop","text":"Welcome to the Lockbox desktop addon documentation!","title":"Lockbox for desktop"},{"location":"SECURITY/","text":"Mozilla Security Mozilla cares about privacy and security. For more information please see: https://www.mozilla.org/security/ If you believe that you've found a security vulnerability, please report it by sending email to the addresses: security@mozilla.org and lockbox-dev@mozilla.com","title":"Mozilla Security"},{"location":"SECURITY/#mozilla-security","text":"Mozilla cares about privacy and security. For more information please see: https://www.mozilla.org/security/ If you believe that you've found a security vulnerability, please report it by sending email to the addresses: security@mozilla.org and lockbox-dev@mozilla.com","title":"Mozilla Security"},{"location":"code_of_conduct/","text":"Code of Conduct This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines .","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines .","title":"Code of Conduct"},{"location":"contributing/","text":"Contributing Thank you for considering and taking the time to contribute! Please note: this project is not currently or actively planning to fix non-critical (data loss, security related) bugs or implement new features. This is an experimental prototype. The following are guidelines for contributing to this project. Code of Conduct This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines . How to Get Started Please refer to installation and build instructions in the install documentation . How to Report Bugs Please open a new issue in the appropriate GitHub repository with steps to reproduce the problem you're experiencing. Be sure to include as much information including screenshots, text output, and both your expected and actual results. How to Request Enhancements First, please refer to the applicable GitHub repository and search the repository's GitHub issues to make sure your idea has not been (or is not still) considered. It may also be easier to see and search across all projects combined on our Waffle.io planning board . Then, please create a new issue in the GitHub repository describing your enhancement. Be sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile. Please keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented. How to Contribute Code Before you get started writing code, be sure what you plan to work on is something we'll be able to accept. The easiest way is to look through out list of good first issues and find something that sounds interesting. If there's something else you'd like to work on, just add a comment in the relevant issue and we'll be happy to discuss your plans. If you have an idea that doesn't have an issue at all, be sure to file an issue first. Once you have a patch ready: Make sure all tests are passing and try to add tests for the code you've written. Submit a pull request! From there, we'll guide you through the review process to the eventual landing of your code! We aim to respond to all review requests within two business days.","title":"Contribute"},{"location":"contributing/#contributing","text":"Thank you for considering and taking the time to contribute! Please note: this project is not currently or actively planning to fix non-critical (data loss, security related) bugs or implement new features. This is an experimental prototype. The following are guidelines for contributing to this project.","title":"Contributing"},{"location":"contributing/#code-of-conduct","text":"This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the Mozilla Community Participation Guidelines and Developer Etiquette Guidelines .","title":"Code of Conduct"},{"location":"contributing/#how-to-get-started","text":"Please refer to installation and build instructions in the install documentation .","title":"How to Get Started"},{"location":"contributing/#how-to-report-bugs","text":"Please open a new issue in the appropriate GitHub repository with steps to reproduce the problem you're experiencing. Be sure to include as much information including screenshots, text output, and both your expected and actual results.","title":"How to Report Bugs"},{"location":"contributing/#how-to-request-enhancements","text":"First, please refer to the applicable GitHub repository and search the repository's GitHub issues to make sure your idea has not been (or is not still) considered. It may also be easier to see and search across all projects combined on our Waffle.io planning board . Then, please create a new issue in the GitHub repository describing your enhancement. Be sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile. Please keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.","title":"How to Request Enhancements"},{"location":"contributing/#how-to-contribute-code","text":"Before you get started writing code, be sure what you plan to work on is something we'll be able to accept. The easiest way is to look through out list of good first issues and find something that sounds interesting. If there's something else you'd like to work on, just add a comment in the relevant issue and we'll be happy to discuss your plans. If you have an idea that doesn't have an issue at all, be sure to file an issue first. Once you have a patch ready: Make sure all tests are passing and try to add tests for the code you've written. Submit a pull request! From there, we'll guide you through the review process to the eventual landing of your code! We aim to respond to all review requests within two business days.","title":"How to Contribute Code"},{"location":"metrics/","text":"Lockbox Desktop Addon Metrics Plan Last Updated: Mar 20, 2019 Analysis Collection Event Registration and Recording Scalar Metrics List of Planned Metrics Events References This is the metrics collection plan for Lockbox. It documents all events currently collected through telemetry, as well those planned for collection but not currently implemented. It will be updated periodically to reflect all new and planned data collection. For similar docs relating to data collection on other platforms see iOS and Android . Analysis Data collection is done solely for the purpose of product development, improvement and maintenance. The data collection outlined here is geared toward answering the following questions (see List of Implemented Events : Note that when we refer to retrieval of \"credentials\", we mean access to usernames, passwords, or both Are users using Lockbox to retrieve credentials? For different intervals of time (e.g. day, week, month), what is: The average rate with which a user retrieves a credential or reveals a password The distribution of above rates across all users Does adoption of Lockbox lead to adoption of the associated Lockbox Mobile Apps? Once downloaded, do users continue to use the app? (i.e., how well are they retained?) We will count a user as retained in a given time interval if they perform one of the following actions: Display the credential list Tap a credential in the credential list Copy a credential to the clipboard Reveal a password Autofill a credential stored in Lockbox into another app Tap the URI associated with a credential (to open it in an app or browser) Since they can be performed automatically, we will not count a user as retained if they only perform the following actions (in absence of any in the list above): Unlock their credentials Sync their credentials from the Firefox desktop browser Does requiring a Firefox Account constitute a roadblock to adoption? What proportion of new Lockbox users are pre-existing Firefox Account users? What proportion of users start the Account sign-in process but never complete it? In addition to answering the above questions that directly concern actions in the app, we will also analyze telemetry emitted from the native password manager that exist in the the Firefox desktop browser. Users of the extension should not be having to use the native manager, so data suggesting otherwise may be a sign that something is amiss. Collection To record Telemetry we will be making use of the public JavaScript API that allows recording and sending of events and scalar measurements through a webextension. Once telemetry is logged on the measurements should appear in about:telemetry . From there they will be submitted in the main ping payload under processes.dynamic.events and available through the usual services (STMO and ATMO), as well as amplitude (eventually). Event Registration and Recording The events that we will record will conform to the structure expected by the telemetry pipeline. When the events are logged in telemetry they will be a list of: [timestamp, category, method, object, value, extra] The API takes care of the timestamp for us. We just need to define category , method , object and extra ( value is optional and we won't use it). Events are defined by registering them using a call to browser.telemetry.registerEvents(category, eventData) . Here's a breakdown of how a to register a typical event: browser.telemetry.registerEvents(\"eventcategory\", { \"eventName\": { methods: [\"click\", ... ], // types of events that can occur objects: [\"aButton\", ... ], // objects event can occur on extra: {\"key\": \"value\", ... } // key-value pairs (strings) } For our purposes, we will use the extra field for a few purposes: To log the UUID of the item that has been added or changed (e.g. \"itemid\": UUID ) TODO: Do we still want to do this? I removed the old datastore events, since they weren't in the list of planned events below. To log the fields that are modified when an item is updated in the datastore (e.g. \"fields\": \"username,password,hostname\" (because the value has to be a string we will have to concat the fields that were updated somehow) Once an event is registered, we can record it with: (*) browser.telemetry.recordEvent(category, method, object, value, extra) Note: The semantics of value is contingent on the event being recorded, see list below. See the Events section for specific examples of event registration and recording. * Due to a bug in Firefox 67-, we will need to use a fallback embedded API experiment to correctly record telemetry events. See bug 1536877 for details.) Scalar recording We use the js api for scalar recording as well. Here registration happens with the following syntax: browser.telemetry.registerScalars(category, { \"scalarName\": { kind: browser.Telemetry.SCALAR_TYPE_COUNT, // SCALAR_TYPE_COUNT, SCALAR_TYPE_BOOLEAN. or SCALAR_TYPE_STRING keyed: false, record_on_release: false, // NEEDS TO BE SET TO RECORD ON RELEASE CHANNEL expired: false, } We set scalar values in the following way: browser.telemetry.scalarSet( \"category.scalar_name\", value ); e.g. lockbox-addon.loginCount for the scalar name. We can also use scalarAdd to increment a scalar value by some amount. Scalar Metrics These are the metrics we currently collect regarding the state of the user's login storage. loginCount (SCALAR_TYPE_COUNT). Current count of the number of items in the user's login storage. If possible, this scalar should be set upon opening either the doorhanger or full extension interface. It need not be set \"in the background\" in the absence of any user interaction with the app. loginsAccessed (SCALAR_TYPE_COUNT). Total of logins accessed (copied, revealed) during the last telemetry session. List of Planned Metrics Events All events are currently implemented under the category: lockboxaddon . The extra field contains itemid for events pertaining to a particular Lockbox item. They are listed and grouped together below based on the contents of the event's method field. startup fires when the webextension is loaded. objects : webextension . Note that this event fires whenever the browser is started, so is not indicative of direct user interaction with Lockbox. value is null. click fires when someone clicks on one of the UI elements listed objects : toolbar , getMobile , faq , accountSettings , giveFeedback , settingsMenu , signinSync , openPlayStore , openAppStore . value is null. sortMenu has value of lastUsed , lastChanged , or name . show events fire when various UI elements are rendered shown to the user. objects : itemListManager , itemListDoorhanger , itemDetailDoorhanger itemDetailManager , newItem , itemEdit , deleteConfirm , connectAnotherDevice (referring to the dialog displayed after a user clicks on the button to learn about the mobile apps) value should be a boolean for itemList* events indicating whether any logins are in the login list (e.g. False if the list is empty). itemAdd , itemUpdate , itemDelete fire after a successful adding, editing or deleting of a credential. objects : manager, doorhanger (contingent on where the user initiated the action). item GUID should be in the extra field. value is null itemSelected fires when a user clicks an item in the itemlist. objects manager, doorhanger value is null copyPassword and copyUsername fire when a user copies their username or password from an item. objects : itemDetailManager , itemDetailDoorhanger value is null. item GUID should be in the extra field. revealPassword fires when a user reveals a password from within the item detail view. objects : itemDetailManager , itemDetailDoorhanger value is null item GUID should be in the extra field (or null, if the item is being created, and doesn't have an ID yet) concealPassword fires when a user conceals a previously revealed password from within the item detail view. objects : itemDetailManager , itemDetailDoorhanger value is null item GUID should be in the extra field (or null, if the item is being created, and doesn't have an ID yet) openWebsite fires when a user clicks to open a credential's associated web address. objects : itemDetailManager , itemDetailDoorhanger value is null item GUID should be in the extra field. References Docs for the Mozilla privileged JS API that allows us to log events thru an add-on: Telemetry Public JS API","title":"Telemetry and Metrics"},{"location":"metrics/#lockbox-desktop-addon-metrics-plan","text":"Last Updated: Mar 20, 2019 Analysis Collection Event Registration and Recording Scalar Metrics List of Planned Metrics Events References This is the metrics collection plan for Lockbox. It documents all events currently collected through telemetry, as well those planned for collection but not currently implemented. It will be updated periodically to reflect all new and planned data collection. For similar docs relating to data collection on other platforms see iOS and Android .","title":"Lockbox Desktop Addon Metrics Plan"},{"location":"metrics/#analysis","text":"Data collection is done solely for the purpose of product development, improvement and maintenance. The data collection outlined here is geared toward answering the following questions (see List of Implemented Events : Note that when we refer to retrieval of \"credentials\", we mean access to usernames, passwords, or both Are users using Lockbox to retrieve credentials? For different intervals of time (e.g. day, week, month), what is: The average rate with which a user retrieves a credential or reveals a password The distribution of above rates across all users Does adoption of Lockbox lead to adoption of the associated Lockbox Mobile Apps? Once downloaded, do users continue to use the app? (i.e., how well are they retained?) We will count a user as retained in a given time interval if they perform one of the following actions: Display the credential list Tap a credential in the credential list Copy a credential to the clipboard Reveal a password Autofill a credential stored in Lockbox into another app Tap the URI associated with a credential (to open it in an app or browser) Since they can be performed automatically, we will not count a user as retained if they only perform the following actions (in absence of any in the list above): Unlock their credentials Sync their credentials from the Firefox desktop browser Does requiring a Firefox Account constitute a roadblock to adoption? What proportion of new Lockbox users are pre-existing Firefox Account users? What proportion of users start the Account sign-in process but never complete it? In addition to answering the above questions that directly concern actions in the app, we will also analyze telemetry emitted from the native password manager that exist in the the Firefox desktop browser. Users of the extension should not be having to use the native manager, so data suggesting otherwise may be a sign that something is amiss.","title":"Analysis"},{"location":"metrics/#collection","text":"To record Telemetry we will be making use of the public JavaScript API that allows recording and sending of events and scalar measurements through a webextension. Once telemetry is logged on the measurements should appear in about:telemetry . From there they will be submitted in the main ping payload under processes.dynamic.events and available through the usual services (STMO and ATMO), as well as amplitude (eventually).","title":"Collection"},{"location":"metrics/#event-registration-and-recording","text":"The events that we will record will conform to the structure expected by the telemetry pipeline. When the events are logged in telemetry they will be a list of: [timestamp, category, method, object, value, extra] The API takes care of the timestamp for us. We just need to define category , method , object and extra ( value is optional and we won't use it). Events are defined by registering them using a call to browser.telemetry.registerEvents(category, eventData) . Here's a breakdown of how a to register a typical event: browser.telemetry.registerEvents(\"eventcategory\", { \"eventName\": { methods: [\"click\", ... ], // types of events that can occur objects: [\"aButton\", ... ], // objects event can occur on extra: {\"key\": \"value\", ... } // key-value pairs (strings) } For our purposes, we will use the extra field for a few purposes: To log the UUID of the item that has been added or changed (e.g. \"itemid\": UUID ) TODO: Do we still want to do this? I removed the old datastore events, since they weren't in the list of planned events below. To log the fields that are modified when an item is updated in the datastore (e.g. \"fields\": \"username,password,hostname\" (because the value has to be a string we will have to concat the fields that were updated somehow) Once an event is registered, we can record it with: (*) browser.telemetry.recordEvent(category, method, object, value, extra) Note: The semantics of value is contingent on the event being recorded, see list below. See the Events section for specific examples of event registration and recording. * Due to a bug in Firefox 67-, we will need to use a fallback embedded API experiment to correctly record telemetry events. See bug 1536877 for details.)","title":"Event Registration and Recording"},{"location":"metrics/#scalar-recording","text":"We use the js api for scalar recording as well. Here registration happens with the following syntax: browser.telemetry.registerScalars(category, { \"scalarName\": { kind: browser.Telemetry.SCALAR_TYPE_COUNT, // SCALAR_TYPE_COUNT, SCALAR_TYPE_BOOLEAN. or SCALAR_TYPE_STRING keyed: false, record_on_release: false, // NEEDS TO BE SET TO RECORD ON RELEASE CHANNEL expired: false, } We set scalar values in the following way: browser.telemetry.scalarSet( \"category.scalar_name\", value ); e.g. lockbox-addon.loginCount for the scalar name. We can also use scalarAdd to increment a scalar value by some amount.","title":"Scalar recording"},{"location":"metrics/#scalar-metrics","text":"These are the metrics we currently collect regarding the state of the user's login storage. loginCount (SCALAR_TYPE_COUNT). Current count of the number of items in the user's login storage. If possible, this scalar should be set upon opening either the doorhanger or full extension interface. It need not be set \"in the background\" in the absence of any user interaction with the app. loginsAccessed (SCALAR_TYPE_COUNT). Total of logins accessed (copied, revealed) during the last telemetry session.","title":"Scalar Metrics"},{"location":"metrics/#list-of-planned-metrics-events","text":"All events are currently implemented under the category: lockboxaddon . The extra field contains itemid for events pertaining to a particular Lockbox item. They are listed and grouped together below based on the contents of the event's method field. startup fires when the webextension is loaded. objects : webextension . Note that this event fires whenever the browser is started, so is not indicative of direct user interaction with Lockbox. value is null. click fires when someone clicks on one of the UI elements listed objects : toolbar , getMobile , faq , accountSettings , giveFeedback , settingsMenu , signinSync , openPlayStore , openAppStore . value is null. sortMenu has value of lastUsed , lastChanged , or name . show events fire when various UI elements are rendered shown to the user. objects : itemListManager , itemListDoorhanger , itemDetailDoorhanger itemDetailManager , newItem , itemEdit , deleteConfirm , connectAnotherDevice (referring to the dialog displayed after a user clicks on the button to learn about the mobile apps) value should be a boolean for itemList* events indicating whether any logins are in the login list (e.g. False if the list is empty). itemAdd , itemUpdate , itemDelete fire after a successful adding, editing or deleting of a credential. objects : manager, doorhanger (contingent on where the user initiated the action). item GUID should be in the extra field. value is null itemSelected fires when a user clicks an item in the itemlist. objects manager, doorhanger value is null copyPassword and copyUsername fire when a user copies their username or password from an item. objects : itemDetailManager , itemDetailDoorhanger value is null. item GUID should be in the extra field. revealPassword fires when a user reveals a password from within the item detail view. objects : itemDetailManager , itemDetailDoorhanger value is null item GUID should be in the extra field (or null, if the item is being created, and doesn't have an ID yet) concealPassword fires when a user conceals a previously revealed password from within the item detail view. objects : itemDetailManager , itemDetailDoorhanger value is null item GUID should be in the extra field (or null, if the item is being created, and doesn't have an ID yet) openWebsite fires when a user clicks to open a credential's associated web address. objects : itemDetailManager , itemDetailDoorhanger value is null item GUID should be in the extra field.","title":"List of Planned Metrics Events"},{"location":"metrics/#references","text":"Docs for the Mozilla privileged JS API that allows us to log events thru an add-on: Telemetry Public JS API","title":"References"},{"location":"pull_request_template/","text":"Fixes #??? ( Required : this reference (one or many) will be closed upon merge. Ideally it has the acceptance criteria and designs for features or fixes related to the work in this Pull Request.) Connected to #??? (Optional: other issues or pull requests related to this, but merging should not close it) Testing and Review Notes ( Required : steps to take to confirm this works as expected or other guidance for code, UX, and any other reviewers) Screenshots or Videos (Optional: to clearly demonstrate the feature or fix to help with testing and reviews) To Do add \u201cWIP\u201d to the PR title if pushing up but not complete nor ready for review [ ] double check the original issue to confirm it is fully satisfied [ ] add testing notes and screenshots in PR description to help guide reviewers [ ] add unit tests optional: consider adding integration tests [ ] request the \"UX\" team perform a design review (if/when applicable) [ ] make sure CI builds are passing (e.g.: fix lint and other errors) [ ] check on the accessibility of any added UI [ ] make sure any new UI has telemetry events wired up and documented in docs/metrics.md, and verify that the events are recording properly (visit about:telemetry#events-tab , then choose 'dynamic' from the dropdown menu at top right, to view events fired by the addon","title":"Pull request template"},{"location":"pull_request_template/#testing-and-review-notes","text":"( Required : steps to take to confirm this works as expected or other guidance for code, UX, and any other reviewers)","title":"Testing and Review Notes"},{"location":"pull_request_template/#screenshots-or-videos","text":"(Optional: to clearly demonstrate the feature or fix to help with testing and reviews)","title":"Screenshots or Videos"},{"location":"pull_request_template/#to-do","text":"add \u201cWIP\u201d to the PR title if pushing up but not complete nor ready for review [ ] double check the original issue to confirm it is fully satisfied [ ] add testing notes and screenshots in PR description to help guide reviewers [ ] add unit tests optional: consider adding integration tests [ ] request the \"UX\" team perform a design review (if/when applicable) [ ] make sure CI builds are passing (e.g.: fix lint and other errors) [ ] check on the accessibility of any added UI [ ] make sure any new UI has telemetry events wired up and documented in docs/metrics.md, and verify that the events are recording properly (visit about:telemetry#events-tab , then choose 'dynamic' from the dropdown menu at top right, to view events fired by the addon","title":"To Do"},{"location":"release-notes/","text":"Firefox Lockwise for Desktop Release Notes 2.2.3-alpha Date: 2019-05-31 What's New Lockwise is now localized for a number of languages! What's Fixed If one of your logins has an unexpected website address, Lockwise no longer stops working and instead displays the address as-is. Known Issues There are reports of Firefox crashing with this extension installed, that appear to be due to telemetry-related issues. For now, telemetry is disabled. This issue is tracked in ( BMO 1555734 ). This extension may conflict with Master Password. If you wish to use this extension, we recommend disabling Master Password, then disable/re-enable this extension before it will work correctly. If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt. 2.2.2-alpha Date: 2019-05-23 What's Fixed Reconnecting to Sync properly works now. The doorhanger is properly closed when visiting a website. The doorhanger allows for varying widths. Known Issues This extension may conflict with Master Password. If you wish to use this extension, we recommend disabling Master Password, then disable/re-enable this extension before it will work correctly. If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt. 2.2.1-alpha Date: 2019-05-20 What's Fixed Telemetry is now properly recorded whenever you open a website via Lockwise. Telemetry is properly recorded now whenever you select to view an item's details. Telemetry is properly recorded when interacting with the toolbar popup. The password field is concealed whenever you select another item's details. The website address now strips paths when saving, making it more compatible with Firefox's autofill/autocomplete support. The default (en-US) localization is updated to better support localizers. Known Issues This extension may conflict with Master Password. If you wish to use this extension, we recommend disabling Master Password, then disable/re-enable this extension before it will work correctly. If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt. 2.2.0-alpha Date: 2019-05-10 Firefox Lockbox is now Firefox Lockwise ! With the new name also comes a new look! What's New Updates the branding (name, logo, and icons) to Lockwise. Updates the look to focus on managing your logins. Added guidance for Lockwise connecting to other devices. Added support for auto-update What's Fixed Changed the \"Website Address\" hints in \"Create New Login\" to be less proscriptive about the URL. Fixed cases where \"This is a duplicate entry\" error bubble was not properly dismissed. Fixed the sort by to properly remember its state across page loads. Fixed the management page to select the first login in the list when opened. Fixed the layout of the management interface to better handle narrow widths. Fixed \"last updated\" to change when you copy the password. Known Issues If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt. 2.1.0-alpha Date: 2019-04-19 Building from the original experiment, this release gives you access to -- and control over -- your logins already saved in Firefox. What's New Uses the same data storage backend as Firefox! View, create, change, and delete your logins here and have those changes take effect immediately in Firefox. Uses the same account backend as Firefox! Your profile information shown here is always the same as the one you've signed into Firefox. Interested in better access on your Android or iOS device? Click the \"learn more\" links throughout to get more information and instructions on how to get Lockbox for your phone or tablet. What's Fixed You are now alerted to validation errors; missing a password, missing a website address, or accidentally adding the same login a second time. Breaking Changes This version no longer uses its own data store; any logins previously saved in Lockbox are lost. Known Issues Sometimes, the \"This is a duplicate entry\" error bubble is not properly dismissed. However, changes are still saved. The profile menu action to \"Connect another device\" doesn't do anything yet. 2.0.0-alpha Date: 2019-03-23 Got releases publishing from circleci builds","title":"Release Notes"},{"location":"release-notes/#firefox-lockwise-for-desktop-release-notes","text":"","title":"Firefox Lockwise for Desktop Release Notes"},{"location":"release-notes/#223-alpha","text":"Date: 2019-05-31","title":"2.2.3-alpha"},{"location":"release-notes/#whats-new","text":"Lockwise is now localized for a number of languages!","title":"What's New"},{"location":"release-notes/#whats-fixed","text":"If one of your logins has an unexpected website address, Lockwise no longer stops working and instead displays the address as-is.","title":"What's Fixed"},{"location":"release-notes/#known-issues","text":"There are reports of Firefox crashing with this extension installed, that appear to be due to telemetry-related issues. For now, telemetry is disabled. This issue is tracked in ( BMO 1555734 ). This extension may conflict with Master Password. If you wish to use this extension, we recommend disabling Master Password, then disable/re-enable this extension before it will work correctly. If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt.","title":"Known Issues"},{"location":"release-notes/#222-alpha","text":"Date: 2019-05-23","title":"2.2.2-alpha"},{"location":"release-notes/#whats-fixed_1","text":"Reconnecting to Sync properly works now. The doorhanger is properly closed when visiting a website. The doorhanger allows for varying widths.","title":"What's Fixed"},{"location":"release-notes/#known-issues_1","text":"This extension may conflict with Master Password. If you wish to use this extension, we recommend disabling Master Password, then disable/re-enable this extension before it will work correctly. If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt.","title":"Known Issues"},{"location":"release-notes/#221-alpha","text":"Date: 2019-05-20","title":"2.2.1-alpha"},{"location":"release-notes/#whats-fixed_2","text":"Telemetry is now properly recorded whenever you open a website via Lockwise. Telemetry is properly recorded now whenever you select to view an item's details. Telemetry is properly recorded when interacting with the toolbar popup. The password field is concealed whenever you select another item's details. The website address now strips paths when saving, making it more compatible with Firefox's autofill/autocomplete support. The default (en-US) localization is updated to better support localizers.","title":"What's Fixed"},{"location":"release-notes/#known-issues_2","text":"This extension may conflict with Master Password. If you wish to use this extension, we recommend disabling Master Password, then disable/re-enable this extension before it will work correctly. If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt.","title":"Known Issues"},{"location":"release-notes/#220-alpha","text":"Date: 2019-05-10 Firefox Lockbox is now Firefox Lockwise ! With the new name also comes a new look!","title":"2.2.0-alpha"},{"location":"release-notes/#whats-new_1","text":"Updates the branding (name, logo, and icons) to Lockwise. Updates the look to focus on managing your logins. Added guidance for Lockwise connecting to other devices. Added support for auto-update","title":"What's New"},{"location":"release-notes/#whats-fixed_3","text":"Changed the \"Website Address\" hints in \"Create New Login\" to be less proscriptive about the URL. Fixed cases where \"This is a duplicate entry\" error bubble was not properly dismissed. Fixed the sort by to properly remember its state across page loads. Fixed the management page to select the first login in the list when opened. Fixed the layout of the management interface to better handle narrow widths. Fixed \"last updated\" to change when you copy the password.","title":"What's Fixed"},{"location":"release-notes/#known-issues_3","text":"If \"Ask to always save logins and passwords for websites\" is enabled after the extension is loaded, you may be prompted by Firefox to save a login when adding or editing in the management interface. As a workaround, you can disable then re-enable the extension to prevent this prompt.","title":"Known Issues"},{"location":"release-notes/#210-alpha","text":"Date: 2019-04-19 Building from the original experiment, this release gives you access to -- and control over -- your logins already saved in Firefox.","title":"2.1.0-alpha"},{"location":"release-notes/#whats-new_2","text":"Uses the same data storage backend as Firefox! View, create, change, and delete your logins here and have those changes take effect immediately in Firefox. Uses the same account backend as Firefox! Your profile information shown here is always the same as the one you've signed into Firefox. Interested in better access on your Android or iOS device? Click the \"learn more\" links throughout to get more information and instructions on how to get Lockbox for your phone or tablet.","title":"What's New"},{"location":"release-notes/#whats-fixed_4","text":"You are now alerted to validation errors; missing a password, missing a website address, or accidentally adding the same login a second time.","title":"What's Fixed"},{"location":"release-notes/#breaking-changes","text":"This version no longer uses its own data store; any logins previously saved in Lockbox are lost.","title":"Breaking Changes"},{"location":"release-notes/#known-issues_4","text":"Sometimes, the \"This is a duplicate entry\" error bubble is not properly dismissed. However, changes are still saved. The profile menu action to \"Connect another device\" doesn't do anything yet.","title":"Known Issues"},{"location":"release-notes/#200-alpha","text":"Date: 2019-03-23 Got releases publishing from circleci builds","title":"2.0.0-alpha"},{"location":"user-guide/","text":"Lockbox User Guide First things first, install the extension . Commands Ctrl-Shift-L : open Lockbox editor (item management)","title":"Lockbox User Guide"},{"location":"user-guide/#lockbox-user-guide","text":"First things first, install the extension .","title":"Lockbox User Guide"},{"location":"user-guide/#commands","text":"Ctrl-Shift-L : open Lockbox editor (item management)","title":"Commands"},{"location":"developer/directory-structure/","text":"Directory Structure The following provides a brief outline of the directory structure of this project. docs/ Documentation that gets built and deploy to GitHub pages (you're reading it!). src/ This is where all of the source code for this project lives. src/background/ Any code meant to run in a background page lives here. For more information, see the README.md in this directory. src/list/ Common code for all the list views in the extension, as well as the specific views themselves (in subdirectories). For more information, see the README.md in this directory. src/list/manage/ The full-tab management UI. src/list/popup/ The \"doorhanger\" UI. src/locales/ All the strings for each locale, in subdirectories with the locale name. For more information, see the README.md in this directory. src/widgets/ All the common UI widgets used throughout the source. For more information, see the README.md in this directory. test/ This is where all of the tests for this project live. test/integration/ End-to-end integration tests operating on a compiled version of the add-on running in Firefox. These tests are written in Javascript using Mocha and webextensions-geckodriver . test/unit/ Unit tests testing individual components of the source code. These are writen in Javascript using Mocha/Chai and run via Karma. The subdirectories of this directory match the subdirectories of src/webextension .","title":"Directory Structure"},{"location":"developer/directory-structure/#directory-structure","text":"The following provides a brief outline of the directory structure of this project.","title":"Directory Structure"},{"location":"developer/directory-structure/#docs","text":"Documentation that gets built and deploy to GitHub pages (you're reading it!).","title":"docs/"},{"location":"developer/directory-structure/#src","text":"This is where all of the source code for this project lives.","title":"src/"},{"location":"developer/directory-structure/#srcbackground","text":"Any code meant to run in a background page lives here. For more information, see the README.md in this directory.","title":"src/background/"},{"location":"developer/directory-structure/#srclist","text":"Common code for all the list views in the extension, as well as the specific views themselves (in subdirectories). For more information, see the README.md in this directory.","title":"src/list/"},{"location":"developer/directory-structure/#srclistmanage","text":"The full-tab management UI.","title":"src/list/manage/"},{"location":"developer/directory-structure/#srclistpopup","text":"The \"doorhanger\" UI.","title":"src/list/popup/"},{"location":"developer/directory-structure/#srclocales","text":"All the strings for each locale, in subdirectories with the locale name. For more information, see the README.md in this directory.","title":"src/locales/"},{"location":"developer/directory-structure/#srcwidgets","text":"All the common UI widgets used throughout the source. For more information, see the README.md in this directory.","title":"src/widgets/"},{"location":"developer/directory-structure/#test","text":"This is where all of the tests for this project live.","title":"test/"},{"location":"developer/directory-structure/#testintegration","text":"End-to-end integration tests operating on a compiled version of the add-on running in Firefox. These tests are written in Javascript using Mocha and webextensions-geckodriver .","title":"test/integration/"},{"location":"developer/directory-structure/#testunit","text":"Unit tests testing individual components of the source code. These are writen in Javascript using Mocha/Chai and run via Karma. The subdirectories of this directory match the subdirectories of src/webextension .","title":"test/unit/"},{"location":"developer/install/","text":"Installing the Lockbox Addon Prerequisites Before installing, you'll need the following: node (10.15 or higher) Firefox (version 67 or higher, Nightly or Developer Edition) For locales, you'll want the following: compare-locales Installing dependencies To install the project dependencies , you can run: npm install Building the source code To build the project , you can run: npm run build This puts all the necessary files in the dist/ directory, which you can then temporarily load into Firefox (e.g. about:debugging ). Building the extension To build an extension .zip , you can run: npm run package This puts the addon bundle in the addons/ directory. :warning: The resulting add-on is unsigned and likely won't work on release versions of Firefox. You can flip the xpinstall.signatures.required preference on other channels accordingly. Running the extension To run the extension in Firefox, you can run: npm run run -- -f nightly This will automatically create a fresh new user profile that will not persist between runs. This means the data will be lost every time. Running the extension with a persistent profile To run the extension with a profile that persists between runs, you can create a new profile by browsing to about:profiles . Once you have a new profile created (no matter the location), you can tell jpm (via npm) to run using that profile and not to copy the profile temporarily so that any changes (e.g. adding new entries) will be saved: npm run run -- -p PROFILE --keep-profile-changes The PROFILE value may be a profile name or the path to the profile. Now, when you run using this profile, any data or settings you make to the browser itself or in Lockbox will be available for future runs. Setting npm run flags To specify flags for run to use regularly, use npm config set webext_runflags : npm config set webext_runflags=\"-f nightly -p PROFILE --keep-profile-changes\" This way if you want to always test locally using an existing profile (with example data) using Firefox Nightly, you can just run (without adding flags): npm run run Running the extension with file watchers To run the extension with reloading on file change : npm run watch This command will run the extension in Firefox. Additionally, it will start watch processes that will do the following on any file change: run JS and CSS linting rebuild the extension reload the extension in the browser Note that you will need to set webext_runflags to specify flags for running Firefox, as this command does not accept any options. Testing the extension There are two forms of autmomated testing present: unit (test individual classes as much in isolation to everything else -- including the browser internals) and integration. To run the unit tests, you can run: npm run test or simply npm test This runs tests using Firefox, but wholly as \"web content\" (what most web pages are). To run the integration tests, you can run: npm run integration This drives Firefox via Selenium, driving an instance of Firefox with this addon installed. By default, it searches for which Firefox by searching for one of the following channels (in this order): Nightly Aurora (Selenium's codename for Developer Edition) Beta Release You can tell it which Firefox to use by setting the LOCKBOX_FIREFOX_BINARY environment variable -- either as one of the channel names or the full path to the firefox binary: LOCKBOX_FIREFOX_BINARY=beta npm run integration By default, the integration tests are NOT run in headless mode -- each test will result in a Firefox window opening when it starts and closing when it ends. You can run the integration tests in headless mode by setting the LOCKBOX_FIREFOX_HEADLESS environment variable to 1 : LOCKBOX_FIREFOX_HEADLESS=1 npm run integration","title":"Build and Install"},{"location":"developer/install/#installing-the-lockbox-addon","text":"","title":"Installing the Lockbox Addon"},{"location":"developer/install/#prerequisites","text":"Before installing, you'll need the following: node (10.15 or higher) Firefox (version 67 or higher, Nightly or Developer Edition) For locales, you'll want the following: compare-locales","title":"Prerequisites"},{"location":"developer/install/#installing-dependencies","text":"To install the project dependencies , you can run: npm install","title":"Installing dependencies"},{"location":"developer/install/#building-the-source-code","text":"To build the project , you can run: npm run build This puts all the necessary files in the dist/ directory, which you can then temporarily load into Firefox (e.g. about:debugging ).","title":"Building the source code"},{"location":"developer/install/#building-the-extension","text":"To build an extension .zip , you can run: npm run package This puts the addon bundle in the addons/ directory. :warning: The resulting add-on is unsigned and likely won't work on release versions of Firefox. You can flip the xpinstall.signatures.required preference on other channels accordingly.","title":"Building the extension"},{"location":"developer/install/#running-the-extension","text":"To run the extension in Firefox, you can run: npm run run -- -f nightly This will automatically create a fresh new user profile that will not persist between runs. This means the data will be lost every time.","title":"Running the extension"},{"location":"developer/install/#running-the-extension-with-a-persistent-profile","text":"To run the extension with a profile that persists between runs, you can create a new profile by browsing to about:profiles . Once you have a new profile created (no matter the location), you can tell jpm (via npm) to run using that profile and not to copy the profile temporarily so that any changes (e.g. adding new entries) will be saved: npm run run -- -p PROFILE --keep-profile-changes The PROFILE value may be a profile name or the path to the profile. Now, when you run using this profile, any data or settings you make to the browser itself or in Lockbox will be available for future runs.","title":"Running the extension with a persistent profile"},{"location":"developer/install/#setting-npm-run-flags","text":"To specify flags for run to use regularly, use npm config set webext_runflags : npm config set webext_runflags=\"-f nightly -p PROFILE --keep-profile-changes\" This way if you want to always test locally using an existing profile (with example data) using Firefox Nightly, you can just run (without adding flags): npm run run","title":"Setting npm run flags"},{"location":"developer/install/#running-the-extension-with-file-watchers","text":"To run the extension with reloading on file change : npm run watch This command will run the extension in Firefox. Additionally, it will start watch processes that will do the following on any file change: run JS and CSS linting rebuild the extension reload the extension in the browser Note that you will need to set webext_runflags to specify flags for running Firefox, as this command does not accept any options.","title":"Running the extension with file watchers"},{"location":"developer/install/#testing-the-extension","text":"There are two forms of autmomated testing present: unit (test individual classes as much in isolation to everything else -- including the browser internals) and integration. To run the unit tests, you can run: npm run test or simply npm test This runs tests using Firefox, but wholly as \"web content\" (what most web pages are). To run the integration tests, you can run: npm run integration This drives Firefox via Selenium, driving an instance of Firefox with this addon installed. By default, it searches for which Firefox by searching for one of the following channels (in this order): Nightly Aurora (Selenium's codename for Developer Edition) Beta Release You can tell it which Firefox to use by setting the LOCKBOX_FIREFOX_BINARY environment variable -- either as one of the channel names or the full path to the firefox binary: LOCKBOX_FIREFOX_BINARY=beta npm run integration By default, the integration tests are NOT run in headless mode -- each test will result in a Firefox window opening when it starts and closing when it ends. You can run the integration tests in headless mode by setting the LOCKBOX_FIREFOX_HEADLESS environment variable to 1 : LOCKBOX_FIREFOX_HEADLESS=1 npm run integration","title":"Testing the extension"},{"location":"developer/releases/","text":"Releases Checklist Before a release can be made, the following must be done: Any user stories labeled as epic to be included in the release are approved by Product and PI All finished work is verified to work as expected and committed to master Any unfinished work has been triaged and assigned to the appropriate milestone Product, Engineering, and PI have voiced approval to release (e.g., via Slack team channel) Instructions NOTE: these instructions assume: All of the checklist items are complete You are an administrator of the project lockbox-addon Your local git working copy has a remote named upstream pointing to git@github.com:mozilla-lockbox/lockbox-addon.git To merge the strings from localization: Update the master branch with the latest commits from the pontoon branch with a Pull Request. This way the translations from the Pontoon service are made available to the release. https://github.com/mozilla-lockwise/lockwise-addon/compare/pontoon?expand=1 Check the locales.json file includes all the locales expected to be made available to users (and add it, if not). Update the pontoon branch with the latest commits from the master branch with a Pull Request. This way the Pontoon service will only expose stable strings to translators. https://github.com/mozilla-lockwise/lockwise-addon/compare/pontoon...master?expand=1 To generate the next release binary: Update \"version\" in package.json (and package-lock.json) we follow the semver syntax Alpha releases will be labeled with \"-alpha\" (e.g., \"0.1.0-alpha\") Beta releases will be labeled with \"-beta\" (e.g., \"1.0.0-beta\") Stable releases will not be labeled, and follow semver from the last Beta release (e.g., \"1.0.0\") Update docs/release-notes.md : latest release is at the top, under a second-level header each release includes the sub headings \"What's New\", \"What's Fixed\", and \"Known Issues\" consult with Product Management on wording if needed Commit and ultimately merge to master branch Create a tag on the release tab in GitHub Name the release the same as the addon version Add same release notes added in step 2 above CircleCI will build and generate a GitHub Release You will be able to view progress in the circleci project dashboard Send an announcement to the team (e.g., via Slack team channel)","title":"Release Instructions"},{"location":"developer/releases/#releases","text":"","title":"Releases"},{"location":"developer/releases/#checklist","text":"Before a release can be made, the following must be done: Any user stories labeled as epic to be included in the release are approved by Product and PI All finished work is verified to work as expected and committed to master Any unfinished work has been triaged and assigned to the appropriate milestone Product, Engineering, and PI have voiced approval to release (e.g., via Slack team channel)","title":"Checklist"},{"location":"developer/releases/#instructions","text":"NOTE: these instructions assume: All of the checklist items are complete You are an administrator of the project lockbox-addon Your local git working copy has a remote named upstream pointing to git@github.com:mozilla-lockbox/lockbox-addon.git To merge the strings from localization: Update the master branch with the latest commits from the pontoon branch with a Pull Request. This way the translations from the Pontoon service are made available to the release. https://github.com/mozilla-lockwise/lockwise-addon/compare/pontoon?expand=1 Check the locales.json file includes all the locales expected to be made available to users (and add it, if not). Update the pontoon branch with the latest commits from the master branch with a Pull Request. This way the Pontoon service will only expose stable strings to translators. https://github.com/mozilla-lockwise/lockwise-addon/compare/pontoon...master?expand=1 To generate the next release binary: Update \"version\" in package.json (and package-lock.json) we follow the semver syntax Alpha releases will be labeled with \"-alpha\" (e.g., \"0.1.0-alpha\") Beta releases will be labeled with \"-beta\" (e.g., \"1.0.0-beta\") Stable releases will not be labeled, and follow semver from the last Beta release (e.g., \"1.0.0\") Update docs/release-notes.md : latest release is at the top, under a second-level header each release includes the sub headings \"What's New\", \"What's Fixed\", and \"Known Issues\" consult with Product Management on wording if needed Commit and ultimately merge to master branch Create a tag on the release tab in GitHub Name the release the same as the addon version Add same release notes added in step 2 above CircleCI will build and generate a GitHub Release You will be able to view progress in the circleci project dashboard Send an announcement to the team (e.g., via Slack team channel)","title":"Instructions"},{"location":"developer/test-plan-accessibility/","text":"Manual Test Plan Keyboard Navigation < 3 hours Navigate the web content using only the keyboard: Tab Order: TAB , as well as SHIFT + TAB , follows a logical and intuitive order. All controls, links, buttons, etc., get focused. Focus should be visibly apparent. When a modal or pop up window opens, focus shifts to the pop up. Focus and tab order is constrained within the modal. Modal can be exited via keyboard. When a pop up window is closed, focus returns to a logical point. Ensure that all content that is visually hidden is also hidden from the keyboard and/or a screen reader. Except content specifically for screen reader users. Firefox toolbar icon can be accessed by keyboard and screen reader users. Page Structure 3 hours Links and buttons have text that give context. All images contain alt text to describe the purpose or content of the image to a non-sighted user. A logical hierarchy of header tags has been used. ARIA landmark roles have been utilized where applicable. ARIA attributes have been put into use. Any custom controls have been given the proper role attribute. State changes are provided via ARIA states . Form input fields and buttons have been labeled for screen reader users. Color < 1 hour Text has sufficient color contrast against its background. Contrast ratio of 4.5:1 for normal text (less than 18 point or 14 point bold.) Contrast ratio of 3:1 for large text (at least 18 point or 14 point bold). Information conveyed via color is also available by other means. Buttons and links are visually apparent when they have focus. Focus remains apparent, and contrast remains sufficient, when simulating varying types of colorblindness. Color blind simulators UX Design Considerations Interactions available with a mouse are also available using a keyboard. Information conveyed visually is also available by other means. Pop-ups and other state changes are announced to screen readers using appropriate ARIA attributes. Temporary on-screen events give users ample time to receive conveyed information. Animations are not excessively flashy, as this can cause seizures in some users. Tools and Resources Use a variety of testing tools to analyze pages: aXe developer tools by Deque Browser developer tools to inspect HTML for logical heading structure and ARIA roles Color blind simulators","title":"Test Plan - Accessibility"},{"location":"developer/test-plan-accessibility/#manual-test-plan","text":"","title":"Manual Test Plan"},{"location":"developer/test-plan-accessibility/#keyboard-navigation","text":"< 3 hours Navigate the web content using only the keyboard: Tab Order: TAB , as well as SHIFT + TAB , follows a logical and intuitive order. All controls, links, buttons, etc., get focused. Focus should be visibly apparent. When a modal or pop up window opens, focus shifts to the pop up. Focus and tab order is constrained within the modal. Modal can be exited via keyboard. When a pop up window is closed, focus returns to a logical point. Ensure that all content that is visually hidden is also hidden from the keyboard and/or a screen reader. Except content specifically for screen reader users. Firefox toolbar icon can be accessed by keyboard and screen reader users.","title":"Keyboard Navigation"},{"location":"developer/test-plan-accessibility/#page-structure","text":"3 hours Links and buttons have text that give context. All images contain alt text to describe the purpose or content of the image to a non-sighted user. A logical hierarchy of header tags has been used. ARIA landmark roles have been utilized where applicable. ARIA attributes have been put into use. Any custom controls have been given the proper role attribute. State changes are provided via ARIA states . Form input fields and buttons have been labeled for screen reader users.","title":"Page Structure"},{"location":"developer/test-plan-accessibility/#color","text":"< 1 hour Text has sufficient color contrast against its background. Contrast ratio of 4.5:1 for normal text (less than 18 point or 14 point bold.) Contrast ratio of 3:1 for large text (at least 18 point or 14 point bold). Information conveyed via color is also available by other means. Buttons and links are visually apparent when they have focus. Focus remains apparent, and contrast remains sufficient, when simulating varying types of colorblindness. Color blind simulators","title":"Color"},{"location":"developer/test-plan-accessibility/#ux-design-considerations","text":"Interactions available with a mouse are also available using a keyboard. Information conveyed visually is also available by other means. Pop-ups and other state changes are announced to screen readers using appropriate ARIA attributes. Temporary on-screen events give users ample time to receive conveyed information. Animations are not excessively flashy, as this can cause seizures in some users.","title":"UX Design Considerations"},{"location":"developer/test-plan-accessibility/#tools-and-resources","text":"Use a variety of testing tools to analyze pages: aXe developer tools by Deque Browser developer tools to inspect HTML for logical heading structure and ARIA roles Color blind simulators","title":"Tools and Resources"},{"location":"developer/test-plan-telemetry/","text":"Telemetry Test Plan: Lockbox-extension Given the importance the Lockbox team places on actionable user telemetry, ensuring confidence in the fidelity of that data is vital. Coverage aspects are broken into two distinct areas: test automation and manual testing. Unit tests When a new feature is developed or an additional user action needs to be recorded, the developer implementing the new telemetry event will add a unit test to ensure the action creates a ping. Manual tests New telemetry events Once a new telemetry event is added to a feature and that event has a unit test, the telemetry ping will be manually inspected by either Leif Oines, Product Data Scientist or Product Integrity. The goal of this exercise it to ensure the new event and accompanying unit test are capturing the correct user behavior. Regression testing A small handful of smoke tests will manually be run prior to each release. Note, the team will rely on the underlying unit tests for comprehensive testing of event verification. Product Integrity will investigate options for automating these tests into the integration test suite. Metrics being gathered For a comprehensive list of metrics being gathered review the Lockbox Telemetry Plan .","title":"Test Plan - Telemetry"},{"location":"developer/test-plan-telemetry/#telemetry-test-plan-lockbox-extension","text":"Given the importance the Lockbox team places on actionable user telemetry, ensuring confidence in the fidelity of that data is vital. Coverage aspects are broken into two distinct areas: test automation and manual testing.","title":"Telemetry Test Plan: Lockbox-extension"},{"location":"developer/test-plan-telemetry/#unit-tests","text":"When a new feature is developed or an additional user action needs to be recorded, the developer implementing the new telemetry event will add a unit test to ensure the action creates a ping.","title":"Unit tests"},{"location":"developer/test-plan-telemetry/#manual-tests","text":"","title":"Manual tests"},{"location":"developer/test-plan-telemetry/#new-telemetry-events","text":"Once a new telemetry event is added to a feature and that event has a unit test, the telemetry ping will be manually inspected by either Leif Oines, Product Data Scientist or Product Integrity. The goal of this exercise it to ensure the new event and accompanying unit test are capturing the correct user behavior.","title":"New telemetry events"},{"location":"developer/test-plan-telemetry/#regression-testing","text":"A small handful of smoke tests will manually be run prior to each release. Note, the team will rely on the underlying unit tests for comprehensive testing of event verification. Product Integrity will investigate options for automating these tests into the integration test suite.","title":"Regression testing"},{"location":"developer/test-plan-telemetry/#metrics-being-gathered","text":"For a comprehensive list of metrics being gathered review the Lockbox Telemetry Plan .","title":"Metrics being gathered"},{"location":"developer/test-plan/","text":"Test Plan: lockbox-extension Ownership Product Integrity: Matt Brandt Product Manager: Sandy Sage Engineering Manager: Devin Reams Engineering Leads: Matthew Miller Purpose Test scope for Q3 and Q4 of the Lockbox Firefox extension. Q3 will take the project through the internal Alpha phase of the product to Q4 when the team will tune a product that we can ship as a limited Beta to external users via Test Pilot. Entry Criteria QA has access to all PRDs, mocks, and related documents. A run script that installs the WebExtension for Firefox Nightly A compiled and signed extension for Firefox Beta and Release Staging and release channels Exit Criteria All bugs against the features have been triaged All milestone features tagged as user stories and TxP have been resolved fixed and verified by Product Integrity Sign off criteria have been met Acceptance Criteria This section broadly defines when the product is ready to ship QA has signed off Product confirms we are feature complete Engineering confirms we are feature complete a11y-review sign off Sec review completed and sign off All info is localized at least for a pre-defined set of locales All telemetry requirements are in place All the necessary PR and blog posts have been sent out Timelines and Milestones Alpha - estimated Q3 timeline July: lay the foundation for system add-on with embedded WebExtension development August: begin secure storage and front-end editor design and implementation September: finish editor and storage, package for release Beta - estimated Q4 timeline The team moves to 2 week sprints that include epics and user stories. Tracking of these user stories and associated features to take place in Github issues December: external \"Beta\" launch to public Testing Summary This section describes which components will be the focus of the test team. In Scope Involvement standing up CI for unit test and integration testing Participate in code reviews Definition of user stories Authoring and executing manual test cases Authoring automated test cases, shared responsibility with the dev team Accessibility review Performance testing Out of Scope Security testing Internal - security group External - ekr and a published report Testing for ESR Requirements for testing Environments Alpha and Beta Lockbox Extension Desktop - Windows 10, macOS [latest] Firefox Lockbox DataStore Desktop Specifications Webextension (url) Datastore (url) Test Strategy User stories In Q3 we ideated on a focal point for the team to begin work on, the below list are these high level stories. Future work will be tracked in github through the use of epics and their dependendent user stories. As a Firefox Account user, I can set it up in 5 clicks or less, and retrieve and fill my credentials in 3 clicks or less. As a security conscious user, I understand the value of the password manager, what it is going to do for me without making me feel overwhelmed. I'm notified of the password manager when I'm ready to make the most use of it, and I can set up and access my accounts as easily as writing them down in a document or notebook. When I log into websites and applications, I want to ensure my identity is protected, so only I can securely access my accounts with my identity. When I create a new account online I want to save the newly created credentials so I can quickly log in the next time I need access to that account. When I go to sign into an account, I want my account credentials to populate the form fields when available, and be accessible in one location when not. When I need to change my account credentials, I want to be able to access my credentials and update them with recovery options to restore previous account credentials. When I want to access my account on my mobile device, I want my account credentials accessible from when I saved them in the browser last, and vice versa, ideally without having to navigate to one location to then manually type in the credentials as viewable on screen. Builds Currently builds are done on an as needed basis using the installation steps in the ReadMe and docs. Test Pilot build, signing and extension hosting pipeline for internal extension signing and distribution Testing Tools Test case creation - TestRail Manual test case execution - TestRail Bug management - GitHub issues Test automation - FoxPuppet and Selenium Other Things Reverting to an older version of Firefox Commodity hardware that matches our target user segment Connectivity requirements & user experience on a diverse range of networks Ensure keyboard only use of the application function (desktop only) Multi-stage workflows are logical and require as few interactions as possible. When appropriate provide indications of how far through the process the user is and how much further Avoidance of jargon and slang Important points and content are highlighted in some way User errors are clearly highlighted with help messages that suggest solutions Sign Off Criteria All test cases have been executed A sufficient level of automated test coverage has been achieved (measured by code coverage tools). Test coverage will also be measured against reduction of risk in the areas designated by the risk assessment plan. All blockers, criticals must be fixed and verified or have an agreed-upon timeline for being fixed (as determined by engineering/QA) Checklist Exit Criteria Owner Status Notes Testing Prerequisites (specs, use cases) Testing Infrastructure setup Test Plan Creation Test Cases Creation Full Functional Tests Execution Automation Coverage Performance Testing All Defects Logged Critical/Blockers Fixed and Verified Product Team Engineering Team Metrics/Telemetry A11y l10n Security","title":"Test Plan"},{"location":"developer/test-plan/#test-plan-lockbox-extension","text":"","title":"Test Plan: lockbox-extension"},{"location":"developer/test-plan/#ownership","text":"Product Integrity: Matt Brandt Product Manager: Sandy Sage Engineering Manager: Devin Reams Engineering Leads: Matthew Miller","title":"Ownership"},{"location":"developer/test-plan/#purpose","text":"Test scope for Q3 and Q4 of the Lockbox Firefox extension. Q3 will take the project through the internal Alpha phase of the product to Q4 when the team will tune a product that we can ship as a limited Beta to external users via Test Pilot.","title":"Purpose"},{"location":"developer/test-plan/#entry-criteria","text":"QA has access to all PRDs, mocks, and related documents. A run script that installs the WebExtension for Firefox Nightly A compiled and signed extension for Firefox Beta and Release Staging and release channels","title":"Entry Criteria"},{"location":"developer/test-plan/#exit-criteria","text":"All bugs against the features have been triaged All milestone features tagged as user stories and TxP have been resolved fixed and verified by Product Integrity Sign off criteria have been met","title":"Exit Criteria"},{"location":"developer/test-plan/#acceptance-criteria","text":"This section broadly defines when the product is ready to ship QA has signed off Product confirms we are feature complete Engineering confirms we are feature complete a11y-review sign off Sec review completed and sign off All info is localized at least for a pre-defined set of locales All telemetry requirements are in place All the necessary PR and blog posts have been sent out","title":"Acceptance Criteria"},{"location":"developer/test-plan/#timelines-and-milestones","text":"Alpha - estimated Q3 timeline July: lay the foundation for system add-on with embedded WebExtension development August: begin secure storage and front-end editor design and implementation September: finish editor and storage, package for release Beta - estimated Q4 timeline The team moves to 2 week sprints that include epics and user stories. Tracking of these user stories and associated features to take place in Github issues December: external \"Beta\" launch to public","title":"Timelines and Milestones"},{"location":"developer/test-plan/#testing-summary","text":"This section describes which components will be the focus of the test team.","title":"Testing Summary"},{"location":"developer/test-plan/#in-scope","text":"Involvement standing up CI for unit test and integration testing Participate in code reviews Definition of user stories Authoring and executing manual test cases Authoring automated test cases, shared responsibility with the dev team Accessibility review Performance testing","title":"In Scope"},{"location":"developer/test-plan/#out-of-scope","text":"Security testing Internal - security group External - ekr and a published report Testing for ESR","title":"Out of Scope"},{"location":"developer/test-plan/#requirements-for-testing","text":"","title":"Requirements for testing"},{"location":"developer/test-plan/#environments","text":"","title":"Environments"},{"location":"developer/test-plan/#alpha-and-beta","text":"","title":"Alpha and Beta"},{"location":"developer/test-plan/#lockbox-extension","text":"Desktop - Windows 10, macOS [latest] Firefox","title":"Lockbox Extension"},{"location":"developer/test-plan/#lockbox-datastore","text":"Desktop","title":"Lockbox DataStore"},{"location":"developer/test-plan/#specifications","text":"Webextension (url) Datastore (url)","title":"Specifications"},{"location":"developer/test-plan/#test-strategy","text":"","title":"Test Strategy"},{"location":"developer/test-plan/#user-stories","text":"In Q3 we ideated on a focal point for the team to begin work on, the below list are these high level stories. Future work will be tracked in github through the use of epics and their dependendent user stories. As a Firefox Account user, I can set it up in 5 clicks or less, and retrieve and fill my credentials in 3 clicks or less. As a security conscious user, I understand the value of the password manager, what it is going to do for me without making me feel overwhelmed. I'm notified of the password manager when I'm ready to make the most use of it, and I can set up and access my accounts as easily as writing them down in a document or notebook. When I log into websites and applications, I want to ensure my identity is protected, so only I can securely access my accounts with my identity. When I create a new account online I want to save the newly created credentials so I can quickly log in the next time I need access to that account. When I go to sign into an account, I want my account credentials to populate the form fields when available, and be accessible in one location when not. When I need to change my account credentials, I want to be able to access my credentials and update them with recovery options to restore previous account credentials. When I want to access my account on my mobile device, I want my account credentials accessible from when I saved them in the browser last, and vice versa, ideally without having to navigate to one location to then manually type in the credentials as viewable on screen.","title":"User stories"},{"location":"developer/test-plan/#builds","text":"Currently builds are done on an as needed basis using the installation steps in the ReadMe and docs. Test Pilot build, signing and extension hosting pipeline for internal extension signing and distribution","title":"Builds"},{"location":"developer/test-plan/#testing-tools","text":"Test case creation - TestRail Manual test case execution - TestRail Bug management - GitHub issues Test automation - FoxPuppet and Selenium","title":"Testing Tools"},{"location":"developer/test-plan/#other-things","text":"Reverting to an older version of Firefox Commodity hardware that matches our target user segment Connectivity requirements & user experience on a diverse range of networks Ensure keyboard only use of the application function (desktop only) Multi-stage workflows are logical and require as few interactions as possible. When appropriate provide indications of how far through the process the user is and how much further Avoidance of jargon and slang Important points and content are highlighted in some way User errors are clearly highlighted with help messages that suggest solutions","title":"Other Things"},{"location":"developer/test-plan/#sign-off","text":"","title":"Sign Off"},{"location":"developer/test-plan/#criteria","text":"All test cases have been executed A sufficient level of automated test coverage has been achieved (measured by code coverage tools). Test coverage will also be measured against reduction of risk in the areas designated by the risk assessment plan. All blockers, criticals must be fixed and verified or have an agreed-upon timeline for being fixed (as determined by engineering/QA)","title":"Criteria"},{"location":"developer/test-plan/#checklist","text":"Exit Criteria Owner Status Notes Testing Prerequisites (specs, use cases) Testing Infrastructure setup Test Plan Creation Test Cases Creation Full Functional Tests Execution Automation Coverage Performance Testing All Defects Logged Critical/Blockers Fixed and Verified Product Team Engineering Team Metrics/Telemetry A11y l10n Security","title":"Checklist"}]}